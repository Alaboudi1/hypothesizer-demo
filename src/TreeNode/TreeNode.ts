var fs = require('fs');

class TreeNode {
    /*
    *   The root node must be created before any others. 
    */

    children: TreeNode[]; // List of children of this node
    question: string; // Question that leads to other nodes
    thisAnswer: string; // The answer to the previous question that lead to this node
    nodeType: string; // hypothesis or question
    infoLink: string; // Link to information about the questions or answers
    infoDesc: string; // Text description of information gathered at that node
    nodeID: number; // Autogenerated nodeID
    static nodeCount: number = 0;

    constructor(question: string, thisAnswer: string, nodeType: string, infoLink: string, infoDesc: string, children: TreeNode[]) {
        this.nodeID = TreeNode.nodeCount++;
        this.children = [];
        children.forEach(child => this.children.push(child));
        this.question = question;
        this.thisAnswer = thisAnswer;
        this.nodeType = nodeType;
        this.infoLink = infoLink;
        this.infoDesc = infoDesc;
    }

    //  returns the next node in the graph, when answer is selected
    branch(answer: string) {
        return this.children.forEach(child => {
            if(answer === child.thisAnswer) {
                return child;
            }
        });
    }
}

export function generateExampleTree() : void {
    // Level 0
    let root = new TreeNode(
        "What framework or technology is being used?", 
        null, 
        "question", 
        "https://en.wikipedia.org/wiki/Web_framework",
        null, 
        [
            new TreeNode(
                "Is the bug in a function component or a class component?",
                "React",
                "question",
                "https://reactjs.org/docs/components-and-props.html#function-and-class-components",
                "Framework used: React",
                [
                    new TreeNode(
                        "Is this component mutating the state?", 
                        "Function",
                        "question",
                        "https://reactjs.org/docs/state-and-lifecycle.html",
                        "Component Type: Function",
                        [
                            new TreeNode(
                                "Is a render expected to take place?",
                                "Yes",
                                "question",
                                "https://reactjs.org/docs/conditional-rendering.html#gatsby-focus-wrapper",
                                "Component mutates state",
                                [
                                    new TreeNode(
                                        "Since you are mutating the state, and you expect a render to take place, please check the location of the state update for any potential bugs in the implementation",
                                        "Yes",
                                        "hypothesis",
                                        "https://reactjs.org/docs/hooks-state.html#gatsby-focus-wrapper",
                                        "Render call expected",
                                        []
                                    ),
                                    new TreeNode(
                                        "Since you are mutating the state and you do not expect a render to take place, consider removing the state update call to resolve the bug",
                                        "No",
                                        "hypothesis",
                                        "https://reactjs.org/docs/hooks-state.html#gatsby-focus-wrapper",
                                        "Render call not expected",
                                        []
                                    )
                                ]
                            ),
                            new TreeNode(
                                "Is a render expected to take place?",
                                "No",
                                "question",
                                "https://reactjs.org/docs/conditional-rendering.html#gatsby-focus-wrapper",
                                "Component does not mutates state",
                                []
                            )
                        ]
                    ),
                    new TreeNode(
                        "Is this component mutating the state?", 
                        "Class",
                        "question",
                        "https://reactjs.org/docs/state-and-lifecycle.html",
                        "Component Type: Class",
                        []
                    ),
                ]
            ),
            new TreeNode(
                "This is not supported yet",
                "Angular",
                "question",
                null,
                "Framework used: Angular",
                []
            ),
            new TreeNode(
                "This is not supported yet",
                "Vue.js",
                "question",
                null,
                "Framework used: Vue.js",
                []
            ),
            new TreeNode(
                "This is not supported yet",
                "Gatsby.js",
                "question",
                null,
                "Framework used: Gatsby.js",
                []
            )
        ]
    );

    // print JSON representation of the tree

    fs.writeFile("tree.json", JSON.stringify(root), (err: any) => {
        if(err) console.log(err);
    });
    fs.writeFile("flattenedNodeStructure.json", JSON.stringify(flattenTree(root)), (err: any) => {
        if(err) console.log(err);
    });
};

const flattenTree = (tree: TreeNode) => {
    let result : TreeNode[] = [];
    result.push(tree);
    tree.children.forEach(child => {
        result = result.concat(flattenTree(child));
    })
    return result;
}

generateExampleTree();